var ZYFILE = { fileInput: null, uploadInput: null, dragDrop: null, url: "", uploadFile: [], lastUploadFile: [], perUploadFile: [], fileNum: 0, filterFile: function (a) { return a }, onSelect: function () { }, onDelete: function () { }, onProgress: function () { }, onSuccess: function () { }, onFailure: function () { }, onComplete: function () { }, funDragHover: function (a) { return a.stopPropagation(), a.preventDefault(), this["dragover" === a.type ? "onDragOver" : "onDragLeave"].call(a.target), this }, funGetFiles: function (a) { var c, d, e, f, b = this; return this.funDragHover(a), c = a.target.files || a.dataTransfer.files, b.lastUploadFile = this.uploadFile, this.uploadFile = this.uploadFile.concat(this.filterFile(c)), d = [], e = [], f = [], $.each(b.lastUploadFile, function (a, b) { e.push(b.name) }), $.each(b.uploadFile, function (a, b) { f.push(b.name) }), $.each(f, function (a, c) { $.inArray(c, e) < 0 && d.push(b.uploadFile[a]) }), this.uploadFile = d, this.funDealtFiles(), !0 }, funDealtFiles: function () { var b, a = this; return $.each(this.uploadFile, function (b, c) { c.index = a.fileNum, a.fileNum++ }), b = this.uploadFile, this.perUploadFile = this.perUploadFile.concat(this.uploadFile), this.uploadFile = this.lastUploadFile.concat(this.uploadFile), this.onSelect(b, this.uploadFile), this }, funDeleteFile: function (a, b) { var c = this, d = [], e = this.perUploadFile[a]; return $.each(this.uploadFile, function (a, b) { e != b && d.push(b) }), this.uploadFile = d, b && c.onDelete(e, this.uploadFile), !0 }, funUploadFiles: function () { var a = this; $.each(this.uploadFile, function (b, c) { a.funUploadFile(c) }) }, funUploadFile: function (a) { var d, b = this, c = new FormData; c.append("fileList", a), d = new XMLHttpRequest, d.upload.addEventListener("progress", function (c) { b.onProgress(a, c.loaded, c.total) }, !1), d.addEventListener("load", function () { b.funDeleteFile(a.index, !1), b.onSuccess(a, d.responseText), 0 == b.uploadFile.length && b.onComplete("全部完成") }, !1), d.addEventListener("error", function () { b.onFailure(a, d.responseText) }, !1), d.open("POST", b.url, !0), d.setRequestHeader("X_FILENAME", a.name), d.send(c) }, funReturnNeedFiles: function () { return this.uploadFile }, init: function () { var a = this; this.dragDrop && (this.dragDrop.addEventListener("dragover", function (b) { a.funDragHover(b) }, !1), this.dragDrop.addEventListener("dragleave", function (b) { a.funDragHover(b) }, !1), this.dragDrop.addEventListener("drop", function (b) { a.funGetFiles(b) }, !1)), a.fileInput && this.fileInput.addEventListener("change", function (b) { a.funGetFiles(b) }, !1), a.uploadInput && this.uploadInput.addEventListener("click", function (b) { a.funUploadFiles(b) }, !1) } };